import java.io.*;
import java.util.*;

class Solution {
    public static boolean detectCycle(int src, int par, ArrayList<ArrayList<Integer>> graph, boolean [] visited){
        if(visited[src] == true){
            return true;
        }
        visited[src] = true;
        // We will apply call to its neibours 
        ArrayList<Integer> nbrs = graph.get(src);
        for(int i  = 0; i < nbrs.size() ; i++){
            int nbr = nbrs.get(i);
            if(nbr != par){
                boolean res = detectCycle(nbr, src, graph, visited);
                if(res == true){
                    return true;
                }
            }
        }
        return false;
        
    }
    public static boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
       // Your code here
       boolean [] visited = new boolean[V];
       for(int i  = 0; i < V; i++){
           if(visited[i] == false){
                boolean res  = detectCycle(i, -1, adj, visited);
               if(res == true){
                   return true;
               }
           }
       }
      return false;
    }
}

public class Main{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int N, E;
        N = sc.nextInt();
        E = sc.nextInt();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i =0; i<N; i++) adj.add(i, new ArrayList<Integer>());    
        for(int i =0; i<E; i++){
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean ans = Solution.isCycle(N,adj);
        if(ans)
            System.out.println("1");
        else
            System.out.println("0");
    }
}
